extends layout

mixin value(description, item)
  if item
    p.statitem
      span= description + ":  "
      | #{item.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
  else
    p.statitem
      span= description + ":  "
      | -

mixin TDnullCheck(value)
  if(value)
    td= value
  else
    td -

mixin RankingNullCheck(value)
  if(value)
    span= "#" + value + "    "
  else
    span= "unranked  "

mixin spec(description, item, rank)
  .divider
  .spec
    h4
      +RankingNullCheck(rank)
      | #{description}
    if item
      +sritem(item.SR)
      +value("WL", item.WL)
      +value("DHP per game", item.DHP)

mixin class(item)
  if item
    +value("WL", item.WL)
    +value("DHP per game", item.DHP)

mixin stats(dmg, prevented, heal, plays, wins, losses)
  table.statstable.table.table-bordered
    thead.thead-default
      tr
        th Damage
        th Prevented
        th Healing
        th Plays
        th Wins
        th Losses
    tbody
      tr
        +TDnullCheck(dmg)
        +TDnullCheck(prevented)
        +TDnullCheck(heal)
        +TDnullCheck(plays)
        +TDnullCheck(wins)
        +TDnullCheck(losses)

mixin overview()

  h4 Kills | Assists | Deaths
  +value( "Kill/Death Ratio" , PLAYER.warlords_sr.KD)
  +value( "Kills+Assists/Deaths Ratio" , PLAYER.warlords_sr.KDA)
  br
  +value( "Kills" , PLAYER.warlords.kills)
  +value( "Assists" , PLAYER.warlords.assists)
  +value( "Deaths" , PLAYER.warlords.deaths)

  .divider
  h4 Damage | Heal | Prevented
  +value( "DHP per game" , PLAYER.warlords_sr.DHP)
  br
  +value( "Prevented" , PLAYER.warlords.damage_prevented)
  +value( "Damage taken" , PLAYER.warlords.damage_taken)
  +value( "Damage dealt" , PLAYER.warlords.damage)
  +value( "Healing" , PLAYER.warlords.heal)
  +value( "Life leeched" , PLAYER.warlords.life_leeched)

  .divider
  h4 Wins | Losses
  +value( "Wins/Losses Ratio" , PLAYER.warlords_sr.WL)
  br
  +value( "Games Played" , PLAYER.warlords_sr.plays)
  +value( "Wins" , PLAYER.warlords.wins)
  -const losses = ((PLAYER.warlords_sr.plays || 0) - (PLAYER.warlords.wins || 0))
  +value( "Losses" , losses)
  +value( "Blue wins" , PLAYER.warlords.wins_blu)
  +value( "Red wins" , PLAYER.warlords.wins_red)
  +value( "Games left / AFK" , PLAYER.warlords.penalty)

  .divider
  h5 Capture The Flag
  +value( "Wins" , PLAYER.warlords.wins_capturetheflag)
  +value( "Wins on Blue" , PLAYER.warlords.wins_capturetheflag_blu)
  +value( "Wins on Red" , PLAYER.warlords.wins_capturetheflag_red)
  +value( "Flags captured by team" , PLAYER.warlords.flag_conquer_team)
  +value( "Flags captured" , PLAYER.warlords.flag_conquer_self)

  .divider
  h5 Domination
  +value( "Wins" , PLAYER.warlords.wins_domination)
  +value( "Wins on Blue" , PLAYER.warlords.wins_domination_blu)
  +value( "Wins on Red" , PLAYER.warlords.wins_domination_red)

  .divider
  h5 Team Deathmatch
  +value( "Wins" , PLAYER.warlords.wins_teamdeathmatch)
  +value( "Wins on Blue" , PLAYER.warlords.wins_teamdeathmatch_blu)
  +value( "Wins on Red" , PLAYER.warlords.wins_teamdeathmatch_red)

mixin paladin()
  +class(PLAYER.warlords_sr.paladin)
  +stats(
    PLAYER.warlords.damage_paladin,
    PLAYER.warlords.damage_prevented_paladin,
    PLAYER.warlords.heal_paladin,
    PLAYER.warlords.paladin_plays,
    PLAYER.warlords.wins_paladin,
    ((PLAYER.warlords.paladin_plays|| 0) - (PLAYER.warlords.wins_paladin|| 0))
  )


  +spec("Avenger", PLAYER.warlords_sr.paladin.avenger, RANKING.paladin.avenger)
  +stats(
    PLAYER.warlords.damage_avenger,
    PLAYER.warlords.damage_prevented_avenger,
    PLAYER.warlords.heal_avenger,
    PLAYER.warlords.avenger_plays,
    PLAYER.warlords.wins_avenger,
    ((PLAYER.warlords.avenger_plays|| 0) - (PLAYER.warlords.wins_avenger|| 0))
  )

  +spec("Crusader", PLAYER.warlords_sr.paladin.crusader, RANKING.paladin.crusader)
  +stats(
    PLAYER.warlords.damage_crusader,
    PLAYER.warlords.damage_prevented_crusader,
    PLAYER.warlords.heal_crusader,
    PLAYER.warlords.crusader_plays,
    PLAYER.warlords.wins_crusader,
    ((PLAYER.warlords.crusader_plays|| 0) - (PLAYER.warlords.wins_crusader|| 0))
  )

  +spec("Protector", PLAYER.warlords_sr.paladin.protector, RANKING.paladin.protector)
  +stats(
    PLAYER.warlords.damage_protector,
    PLAYER.warlords.damage_prevented_protector,
    PLAYER.warlords.heal_protector,
    PLAYER.warlords.protector_plays,
    PLAYER.warlords.wins_protector,
    ((PLAYER.warlords.protector_plays|| 0) - (PLAYER.warlords.wins_protector|| 0))
  )

mixin mage()
  +class(PLAYER.warlords_sr.mage)
  +stats(
    PLAYER.warlords.damage_mage,
    PLAYER.warlords.damage_prevented_mage,
    PLAYER.warlords.heal_mage,
    PLAYER.warlords.mage_plays,
    PLAYER.warlords.wins_mage,
    ((PLAYER.warlords.mage_plays|| 0) - (PLAYER.warlords.wins_mage|| 0))
  )
  +spec("Pyromancer", PLAYER.warlords_sr.mage.pyromancer, RANKING.mage.pyromancer)
  +stats(
    PLAYER.warlords.damage_pyromancer,
    PLAYER.warlords.damage_prevented_pyromancer,
    PLAYER.warlords.heal_pyromancer,
    PLAYER.warlords.pyromancer_plays,
    PLAYER.warlords.wins_pyromancer,
    ((PLAYER.warlords.pyromancer_plays|| 0) - (PLAYER.warlords.wins_pyromancer|| 0))
  )
  +spec("Aquamancer", PLAYER.warlords_sr.mage.aquamancer, RANKING.mage.aquamancer)
  +stats(
    PLAYER.warlords.damage_aquamancer,
    PLAYER.warlords.damage_prevented_aquamancer,
    PLAYER.warlords.heal_aquamancer,
    PLAYER.warlords.aquamancer_plays,
    PLAYER.warlords.wins_aquamancer,
    ((PLAYER.warlords.aquamancer_plays|| 0) - (PLAYER.warlords.wins_aquamancer|| 0))
  )
  +spec("Cryomancer", PLAYER.warlords_sr.mage.cryomancer, RANKING.mage.cryomancer)
  +stats(
    PLAYER.warlords.damage_cryomancer,
    PLAYER.warlords.damage_prevented_cryomancer,
    PLAYER.warlords.heal_cryomancer,
    PLAYER.warlords.cryomancer_plays,
    PLAYER.warlords.wins_cryomancer,
    ((PLAYER.warlords.cryomancer_plays|| 0) - (PLAYER.warlords.wins_cryomancer|| 0))
  )

mixin warrior()
  +class(PLAYER.warlords_sr.warrior)
  +stats(
    PLAYER.warlords.damage_warrior,
    PLAYER.warlords.damage_prevented_warrior,
    PLAYER.warlords.heal_warrior,
    PLAYER.warlords.warrior_plays,
    PLAYER.warlords.wins_warrior,
    ((PLAYER.warlords.warrior_plays|| 0) - (PLAYER.warlords.wins_warrior|| 0))
  )
  +spec("Berserker", PLAYER.warlords_sr.warrior.berserker, RANKING.warrior.berserker)
  +stats(
    PLAYER.warlords.damage_berserker,
    PLAYER.warlords.damage_prevented_berserker,
    PLAYER.warlords.heal_berserker,
    PLAYER.warlords.berserker_plays,
    PLAYER.warlords.wins_berserker,
    ((PLAYER.warlords.berserker_plays|| 0) - (PLAYER.warlords.wins_berserker|| 0))
  )
  +spec("Defender", PLAYER.warlords_sr.warrior.defender, RANKING.warrior.defender)
  +stats(
    PLAYER.warlords.damage_defender,
    PLAYER.warlords.damage_prevented_defender,
    PLAYER.warlords.heal_defender,
    PLAYER.warlords.defender_plays,
    PLAYER.warlords.wins_defender,
    ((PLAYER.warlords.defender_plays|| 0) - (PLAYER.warlords.wins_defender|| 0))
  )
  +spec("Revenant", PLAYER.warlords_sr.warrior.revenant, RANKING.warrior.revenant)
  +stats(
      PLAYER.warlords.damage_revenant,
      PLAYER.warlords.damage_prevented_revenant,
      PLAYER.warlords.heal_revenant,
      PLAYER.warlords.revenant_plays,
      PLAYER.warlords.wins_revenant,
    ((PLAYER.warlords.revenant_plays|| 0) - (PLAYER.warlords.wins_revenant|| 0))
  )

mixin shaman()
  +class(PLAYER.warlords_sr.shaman)
  +stats(
    PLAYER.warlords.damage_shaman,
    PLAYER.warlords.damage_prevented_shaman,
    PLAYER.warlords.heal_shaman,
    PLAYER.warlords.shaman_plays,
    PLAYER.warlords.wins_shaman,
    ((PLAYER.warlords.shaman_plays|| 0) - (PLAYER.warlords.wins_shaman|| 0))
  )
  +spec("Thunderlord", PLAYER.warlords_sr.shaman.thunderlord, RANKING.shaman.thunderlord)
  +stats(
    PLAYER.warlords.damage_thunderlord,
    PLAYER.warlords.damage_prevented_thunderlord,
    PLAYER.warlords.heal_thunderlord,
    PLAYER.warlords.thunderlord_plays,
    PLAYER.warlords.wins_thunderlord,
    ((PLAYER.warlords.thunderlord_plays|| 0) - (PLAYER.warlords.wins_thunderlord|| 0))
  )
  +spec("Spiritguard", PLAYER.warlords_sr.shaman.spiritguard, RANKING.shaman.spiritguard)
  +stats(
      PLAYER.warlords.damage_spiritguard,
      PLAYER.warlords.damage_prevented_spiritguard,
      PLAYER.warlords.heal_spiritguard,
      PLAYER.warlords.spiritguard_plays,
      PLAYER.warlords.wins_spiritguard,
    ((PLAYER.warlords.spiritguard_plays|| 0) - (PLAYER.warlords.wins_spiritguard|| 0))
  )
  +spec("Earthwarden", PLAYER.warlords_sr.shaman.earthwarden, RANKING.shaman.earthwarden)
  +stats(
    PLAYER.warlords.damage_earthwarden,
    PLAYER.warlords.damage_prevented_earthwarden,
    PLAYER.warlords.heal_earthwarden,
    PLAYER.warlords.earthwarden_plays,
    PLAYER.warlords.wins_earthwarden,
    ((PLAYER.warlords.earthwarden_plays|| 0) - (PLAYER.warlords.wins_earthwarden|| 0))
  )


mixin srdisplaythingy(value)
    .srtext.rounded-left
      p SR
    .srvalue
      p= value

mixin sritem(value)
  if(value)
    if(value < 1500)
      .sr.rounded.border.bronze
        +srdisplaythingy(value)
    else if(value < 2000)
      .sr.rounded.border.silver
        +srdisplaythingy(value)
    else if(value < 2500)
      .sr.rounded.border.platinum
        +srdisplaythingy(value)
    else if(value < 3000)
      .sr.rounded.border.gold
        +srdisplaythingy(value)
    else if(value < 3500)
      .sr.rounded.border.diamond
        +srdisplaythingy(value)
    else if(value < 4000)
      .sr.rounded.border.master
        +srdisplaythingy(value)
    else if(value >= 4000)
      .sr.rounded.border.grandmaster
        +srdisplaythingy(value)

  else
    .sr.rounded
      .srtext.rounded-left
        p SR
      .srvalue.rounded-right
        p -

mixin manualReload()
  if PLAYER.warlords_sr.SR && PLAYER.warlords_sr.SR > 0
    if RELOAD_COOLDOWN
      - const cooldown = Math.round(MANUAL_RELOAD_COOLDOWN_TIME - ((Date.now() - RELOAD_COOLDOWN) / 1000));
      - const reloadText = "<b>Cooldown</b> " + cooldown.toString() + "s"
      span.float-right.d-inline-block(tabindex="0" data-toggle="tooltip" data-placement="left" data-html="true" title=reloadText)
        button(disabled= true style="pointer-events: none;")#reloadButton.btn.btn-light
          i.fas.fa-sync
    else
        button#reloadButton.btn.btn-light.float-right
          i.fas.fa-sync


block js
  script
    include player.js

block content
  #content
    .container
      .row.playerside
        .col-lg-12
          .card
            - var playerHeadLink= "https://crafatar.com/avatars/" + PLAYER.uuid
            .card-body
              .row
                .col-lg-2.col-sm-3.col-3
                  img.card-img-top(src= playerHeadLink)
                .col-lg-10.col-sm-9.col-9
                  +manualReload
                  h3.card-title= PLAYER.name
                    if IS_INACTIVE
                      span.badge.mx-2.bg-dark.text-light Inactive
                  if NAME_HISTORY
                    p= NAME_HISTORY
                  - var planckeLink= "https://plancke.io/hypixel/player/stats/" + PLAYER.name
                  a.btn.btn-light(href= planckeLink) show on plancke.io

        .col-lg-12
          .accordion#classaccordion
            .card
              .card-header#heading-general(data-toggle = "collapse" data-target = "#collapse-general" aria-controls="collapse-general")
                h3.mb-0
                  +RankingNullCheck(RANKING.overall)
                  | Overall
                +sritem(PLAYER.warlords_sr.SR)
              #collapse-general.collapse(aria-labelledby="heading-general" data-parent="#classaccordion")
                .card-body
                  +overview()


            .card
              .card-header#heading-paladin(data-toggle = "collapse" data-target = "#collapse-paladin" aria-controls="collapse-paladin")
                h3.mb-0
                  +RankingNullCheck(RANKING.paladin.overall)
                  | Paladin
                  span(style="color : #757575")  Lv#{PLAYER.warlords_sr.paladin.LEVEL}
                +sritem(PLAYER.warlords_sr.paladin.SR)
              #collapse-paladin.collapse(aria-labelledby="heading-paladin" data-parent="#classaccordion")
                .card-body
                  +paladin()

            .card
              .card-header#heading-mage(data-toggle = "collapse" data-target = "#collapse-mage" aria-controls="collapse-mage")
                h3.mb-0
                  +RankingNullCheck(RANKING.mage.overall)
                  | Mage
                  span(style="color : #757575")  Lv#{PLAYER.warlords_sr.mage.LEVEL}
                +sritem(PLAYER.warlords_sr.mage.SR)
              #collapse-mage.collapse(aria-labelledby="heading-mage" data-parent="#classaccordion")
                .card-body
                  +mage()

            .card
              .card-header#heading-shaman(data-toggle = "collapse" data-target = "#collapse-shaman" aria-controls="collapse-shaman")
                h3.mb-0
                  +RankingNullCheck(RANKING.shaman.overall)
                  | Shaman
                  span(style="color : #757575")  Lv#{PLAYER.warlords_sr.shaman.LEVEL}
                +sritem(PLAYER.warlords_sr.shaman.SR)
              #collapse-shaman.collapse(aria-labelledby="heading-shaman" data-parent="#classaccordion")
                .card-body
                  +shaman()

            .card
              .card-header#heading-warrior(data-toggle = "collapse" data-target = "#collapse-warrior" aria-controls="collapse-warrior")
                h3.mb-0
                  +RankingNullCheck(RANKING.warrior.overall)
                  | Warrior
                  span(style="color : #757575")  Lv#{PLAYER.warlords_sr.warrior.LEVEL}
                +sritem(PLAYER.warlords_sr.warrior.SR)
              #collapse-warrior.collapse(aria-labelledby="heading-warrior" data-parent="#classaccordion")
                .card-body
                  +warrior()
